// generated by /tmp/go-build4080354966/b001/exe/deep-copy -o deepcopy.go --type OrganizeState --pointer-receiver ./; DO NOT EDIT.

package core

import (
	"net/netip"
)

// DeepCopy generates a deep copy of *OrganizeState
func (o *OrganizeState) DeepCopy() *OrganizeState {
	var cp OrganizeState = *o
	if o.Prefs != nil {
		cp.Prefs = new(Prefs)
		*cp.Prefs = *o.Prefs
		if o.Prefs.SubnetsAllowed != nil {
			cp.Prefs.SubnetsAllowed = make([]netip.Prefix, len(o.Prefs.SubnetsAllowed))
			copy(cp.Prefs.SubnetsAllowed, o.Prefs.SubnetsAllowed)
		}
		if o.Prefs.SubnetsForbidden != nil {
			cp.Prefs.SubnetsForbidden = make([]netip.Prefix, len(o.Prefs.SubnetsForbidden))
			copy(cp.Prefs.SubnetsForbidden, o.Prefs.SubnetsForbidden)
		}
		if o.Prefs.IfacePrefixAllowed != nil {
			cp.Prefs.IfacePrefixAllowed = make([]string, len(o.Prefs.IfacePrefixAllowed))
			copy(cp.Prefs.IfacePrefixAllowed, o.Prefs.IfacePrefixAllowed)
		}
		if o.Prefs.LocalDomains != nil {
			cp.Prefs.LocalDomains = make([]string, len(o.Prefs.LocalDomains))
			copy(cp.Prefs.LocalDomains, o.Prefs.LocalDomains)
		}
	}
	if o.Peers != nil {
		cp.Peers = make(map[string]*Peer, len(o.Peers))
		for k2, v2 := range o.Peers {
			var cp_Peers_v2 *Peer
			if v2 != nil {
				cp_Peers_v2 = new(Peer)
				*cp_Peers_v2 = *v2
				if v2.Descriptor.WireGuardPK != nil {
					cp_Peers_v2.Descriptor.WireGuardPK = make([]byte, len(v2.Descriptor.WireGuardPK))
					copy(cp_Peers_v2.Descriptor.WireGuardPK, v2.Descriptor.WireGuardPK)
				}
				if v2.Descriptor.CsidhPK != nil {
					cp_Peers_v2.Descriptor.CsidhPK = make([]byte, len(v2.Descriptor.CsidhPK))
					copy(cp_Peers_v2.Descriptor.CsidhPK, v2.Descriptor.CsidhPK)
				}
				if v2.Descriptor.Addrs != nil {
					cp_Peers_v2.Descriptor.Addrs = make([]netip.Addr, len(v2.Descriptor.Addrs))
					copy(cp_Peers_v2.Descriptor.Addrs, v2.Descriptor.Addrs)
				}
				if v2.Descriptor.VulaPK != nil {
					cp_Peers_v2.Descriptor.VulaPK = make([]byte, len(v2.Descriptor.VulaPK))
					copy(cp_Peers_v2.Descriptor.VulaPK, v2.Descriptor.VulaPK)
				}
				if v2.Descriptor.Routes != nil {
					cp_Peers_v2.Descriptor.Routes = make([]netip.Prefix, len(v2.Descriptor.Routes))
					copy(cp_Peers_v2.Descriptor.Routes, v2.Descriptor.Routes)
				}
				if v2.Descriptor.Signature != nil {
					cp_Peers_v2.Descriptor.Signature = make([]byte, len(v2.Descriptor.Signature))
					copy(cp_Peers_v2.Descriptor.Signature, v2.Descriptor.Signature)
				}
				if v2.Nicknames != nil {
					cp_Peers_v2.Nicknames = make(map[string]bool, len(v2.Nicknames))
					for k5, v5 := range v2.Nicknames {
						cp_Peers_v2.Nicknames[k5] = v5
					}
				}
				if v2.Addrs != nil {
					cp_Peers_v2.Addrs = make(map[netip.Addr]bool, len(v2.Addrs))
					for k5, v5 := range v2.Addrs {
						cp_Peers_v2.Addrs[k5] = v5
					}
				}
			}
			cp.Peers[k2] = cp_Peers_v2
		}
	}
	if o.SystemState != nil {
		cp.SystemState = new(SystemState)
		*cp.SystemState = *o.SystemState
		if o.SystemState.CurrentSubnets != nil {
			cp.SystemState.CurrentSubnets = make(map[netip.Prefix][]netip.Addr, len(o.SystemState.CurrentSubnets))
			for k4, v4 := range o.SystemState.CurrentSubnets {
				var cp_SystemState_CurrentSubnets_v4 []netip.Addr
				if v4 != nil {
					cp_SystemState_CurrentSubnets_v4 = make([]netip.Addr, len(v4))
					copy(cp_SystemState_CurrentSubnets_v4, v4)
				}
				cp.SystemState.CurrentSubnets[k4] = cp_SystemState_CurrentSubnets_v4
			}
		}
		if o.SystemState.CurrentInterfaces != nil {
			cp.SystemState.CurrentInterfaces = make(map[string][]netip.Addr, len(o.SystemState.CurrentInterfaces))
			for k4, v4 := range o.SystemState.CurrentInterfaces {
				var cp_SystemState_CurrentInterfaces_v4 []netip.Addr
				if v4 != nil {
					cp_SystemState_CurrentInterfaces_v4 = make([]netip.Addr, len(v4))
					copy(cp_SystemState_CurrentInterfaces_v4, v4)
				}
				cp.SystemState.CurrentInterfaces[k4] = cp_SystemState_CurrentInterfaces_v4
			}
		}
		if o.SystemState.OurWgPK != nil {
			cp.SystemState.OurWgPK = make([]byte, len(o.SystemState.OurWgPK))
			copy(cp.SystemState.OurWgPK, o.SystemState.OurWgPK)
		}
		if o.SystemState.Gateways != nil {
			cp.SystemState.Gateways = make([]netip.Addr, len(o.SystemState.Gateways))
			copy(cp.SystemState.Gateways, o.SystemState.Gateways)
		}
	}
	if o.EventLog != nil {
		cp.EventLog = make([]string, len(o.EventLog))
		copy(cp.EventLog, o.EventLog)
	}
	return &cp
}
