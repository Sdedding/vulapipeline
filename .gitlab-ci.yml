image: python:3.10-bullseye

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_PIPELINE_SOURCE == 'web'

stages:
  - Static-Analysis
  - Test
  - Build
  - Run

variables:
  PIPENV_VERBOSITY: -1
  PIPENV_CACHE_DIR: .cache/pipenv
  PIP_CACHE_DIR: .cache/pip

cache:
  paths:
    - .cache/pip
    - .cache/pipenv

before_script:
  - PATH=$PATH:~/.local/bin
  - apt update
  - apt install -y --no-install-recommends pkg-config libglib2.0-dev libcairo2-dev libgirepository1.0-dev python3-all-dev python3-tk make git gir1.2-ayatanaappindicator3-0.1 xvfb xauth portaudio19-dev python3-pyaudio openssl python3-cryptography python3-pyroute2 python3-qrcode python3-schema python3-zeroconf python3-pillow python3-distutils python3-build build-essential debhelper dh-python fakeroot git make rpm python3-build python3-venv dpkg-dev python3-xlib
  - python -m pip install --user pipx
  - python -m pipx ensurepath
  - pipx install pipenv
  - pipenv install -v --skip-lock rendez highctidh
  - pipenv install -v --dev --skip-lock

# ---------- static analysis stage
check:
  stage: Static-Analysis
  allow_failure: true
  script:
    - make check

sast:
  stage: Static-Analysis
  allow_failure: true
  script:
    - make sast-analysis
  artifacts:
    when: always
    paths:
      - ./report-*.txt

# ---------- test stage
pytest:
  stage: Test
  allow_failure: false
  script:
   - . $(pipenv --venv)/bin/activate
    - xvfb-run -- make pytest

pytest-coverage:
  stage: Test
  script:
   - . $(pipenv --venv)/bin/activate
    - xvfb-run -- make pytest-coverage
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# ---------- build stage
build-wheel:
 stage: Build
 allow_failure: false
 script:
   - . $(pipenv --venv)/bin/activate
   - make wheel
 artifacts:
   name: python-wheel
   paths:
     - dist/vula-*.whl

build-packages:
  stage: Build
  allow_failure: false
  script:
    - . $(pipenv --venv)/bin/activate
    - make deb
    - dpkg -I deb_dist/*.deb
  artifacts:
    name: deb
    paths:
      - deb_dist/*.deb

# ---------- Run stage
# Temporarily disabled due to pypi-install related errors
# ping-test:
#   stage: Run 
#   image: quay.io/podman/stable:latest
#   before_script:
#     - echo "hey"
#   script:
#     - dnf install -y make python-setuptools git-core
#     - cd podman && make test-ping
